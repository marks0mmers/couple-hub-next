// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  coupleId      String?

  couple        Couple?   @relation(fields: [coupleId], references: [id])
}

enum CoupleType {
  DATING
  ENGAGED
  MARRIED
}

model Couple {
  id                String      @id @default(cuid())
  relationshipStart DateTime?   @db.Date
  coupleType        CoupleType  @default(DATING)

  users             User[]
  wedding           Wedding?
}

model Wedding {
  id                      String          @id @default(cuid())
  coupleId                String          @unique
  couple                  Couple          @relation(fields: [coupleId], references: [id])
  weddingDate             DateTime?       @db.Date
  plannedNumberOfGuests   Int             @default(0)
  plannedTotalCost        Float           @default(0)
  venues                  WeddingVenue[]
  guestTiers              WeddingGuestTier[]
  budgetItems             WeddingBudgetItem[]
}

enum WeddingVenuePriceType {
  FLAT_FEE
  PER_HOUR
}

model WeddingVenue {
  id          String    @id @default(cuid())
  weddingId   String
  wedding     Wedding   @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  name        String
  capacity    Int
  price       Float
  priceType   WeddingVenuePriceType
  rentalStart DateTime? @db.Time(2)
  rentalEnd   DateTime? @db.Time(2)
  street      String
  city        String
  state       String
  zipCode     Int
}

model WeddingGuestTier {
  id            String    @id @default(cuid())
  weddingId     String
  wedding       Wedding   @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  weddingGuests WeddingGuest[]

  name          String
  order         Int
}

model WeddingGuest {
  id                  String            @id @default(cuid())
  weddingGuestTierId  String
  weddingGuestTier    WeddingGuestTier  @relation(fields: [weddingGuestTierId], references: [id], onDelete: Cascade)

  name                String
  order               Int
}

model WeddingBudgetItem {
  id            String      @id @default(cuid())
  weddingId     String
  wedding       Wedding     @relation(fields: [weddingId], references: [id], onDelete: Cascade)

  name          String
  goalAmount    Float
  actualAmount  Float?
  actualPaid    Float?
  dueDate       DateTime?   @db.Date
}
